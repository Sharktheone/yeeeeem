const std = @import("std");
const bytes = @import("../bytes/bytes.zig");
const instruction = @import("instructions.zig");
const opcodes = @import("opcodes.zig");

pub fn parse(reader: *bytes.Reader) !instruction.Instruction {
    const tag_val = try reader.read_u8();
    const tag: opcodes.OpCode = @enumFromInt(tag_val);

    const inst = switch (tag) {
        .aaload => instruction.Instruction.aaload,
        .aastore => instruction.Instruction.aastore,
        .aconst_null => instruction.Instruction.aconst_null,
        .aload => instruction.Instruction{ .aload = try reader.read_u8() },
        .aload_0 => instruction.Instruction.aload_0,
        .aload_1 => instruction.Instruction.aload_1,
        .aload_2 => instruction.Instruction.aload_2,
        .aload_3 => instruction.Instruction.aload_3,
        .anewarray => instruction.Instruction{ .anewarray = try reader.read_u16() },
        .areturn => instruction.Instruction.areturn,
        .arraylength => instruction.Instruction.arraylength,
        .astore => instruction.Instruction{ .astore = try reader.read_u8() },
        .astore_0 => instruction.Instruction.astore_0,
        .astore_1 => instruction.Instruction.astore_1,
        .astore_2 => instruction.Instruction.astore_2,
        .astore_3 => instruction.Instruction.astore_3,
        .athrow => instruction.Instruction.athrow,
        .baload => instruction.Instruction.baload,
        .bastore => instruction.Instruction.bastore,
        .bipush => instruction.Instruction{ .bipush = try reader.read_u8() },
        .breakpoint => instruction.Instruction.breakpoint,
        .caload => instruction.Instruction.caload,
        .castore => instruction.Instruction.castore,
        .checkcast => instruction.Instruction{ .checkcast = try reader.read_u16() },
        .d2f => instruction.Instruction.d2f,
        .d2i => instruction.Instruction.d2i,
        .d2l => instruction.Instruction.d2l,
        .dadd => instruction.Instruction.dadd,
        .daload => instruction.Instruction.daload,
        .dastore => instruction.Instruction.dastore,
        .dcmpg => instruction.Instruction.dcmpg,
        .dcmpl => instruction.Instruction.dcmpl,
        .dconst_0 => instruction.Instruction.dconst_0,
        .dconst_1 => instruction.Instruction.dconst_1,
        .ddiv => instruction.Instruction.ddiv,
        .dload => instruction.Instruction{ .dload = try reader.read_u8() },
        .dload_0 => instruction.Instruction.dload_0,
        .dload_1 => instruction.Instruction.dload_1,
        .dload_2 => instruction.Instruction.dload_2,
        .dload_3 => instruction.Instruction.dload_3,
        .dmul => instruction.Instruction.dmul,
        .dneg => instruction.Instruction.dneg,
        .drem => instruction.Instruction.drem,
        .dreturn => instruction.Instruction.dreturn,
        .dstore => instruction.Instruction{ .dstore = try reader.read_u8() },
        .dstore_0 => instruction.Instruction.dstore_0,
        .dstore_1 => instruction.Instruction.dstore_1,
        .dstore_2 => instruction.Instruction.dstore_2,
        .dstore_3 => instruction.Instruction.dstore_3,
        .dsub => instruction.Instruction.dsub,
        .dup => instruction.Instruction.dup,
        .dup_x1 => instruction.Instruction.dup_x1,
        .dup_x2 => instruction.Instruction.dup_x2,
        .dup2 => instruction.Instruction.dup2,
        .dup2_x1 => instruction.Instruction.dup2_x1,
        .dup2_x2 => instruction.Instruction.dup2_x2,
        .f2d => instruction.Instruction.f2d,
        .f2i => instruction.Instruction.f2i,
        .f2l => instruction.Instruction.f2l,
        .fadd => instruction.Instruction.fadd,
        .faload => instruction.Instruction.faload,
        .fastore => instruction.Instruction.fastore,
        .fcmpg => instruction.Instruction.fcmpg,
        .fcmpl => instruction.Instruction.fcmpl,
        .fconst_0 => instruction.Instruction.fconst_0,
        .fconst_1 => instruction.Instruction.fconst_1,
        .fconst_2 => instruction.Instruction.fconst_2,
        .fdiv => instruction.Instruction.fdiv,
        .fload => instruction.Instruction{ .fload = try reader.read_u8() },
        .fload_0 => instruction.Instruction.fload_0,
        .fload_1 => instruction.Instruction.fload_1,
        .fload_2 => instruction.Instruction.fload_2,
        .fload_3 => instruction.Instruction.fload_3,
        .fmul => instruction.Instruction.fmul,
        .fneg => instruction.Instruction.fneg,
        .frem => instruction.Instruction.frem,
        .freturn => instruction.Instruction.freturn,
        .fstore => instruction.Instruction{ .fstore = try reader.read_u8() },
        .fstore_0 => instruction.Instruction.fstore_0,
        .fstore_1 => instruction.Instruction.fstore_1,
        .fstore_2 => instruction.Instruction.fstore_2,
        .fstore_3 => instruction.Instruction.fstore_3,
        .fsub => instruction.Instruction.fsub,
        .getfield => instruction.Instruction{ .getfield = try reader.read_u16() },
        .getstatic => instruction.Instruction{ .getstatic = try reader.read_u16() },
        .goto => instruction.Instruction{ .goto = try reader.read_i16() },
        .goto_w => instruction.Instruction{ .goto_w = try reader.read_i32() },
        .i2b => instruction.Instruction.i2b,
        .i2c => instruction.Instruction.i2c,
        .i2d => instruction.Instruction.i2d,
        .i2f => instruction.Instruction.i2f,
        .i2l => instruction.Instruction.i2l,
        .i2s => instruction.Instruction.i2s,
        .iadd => instruction.Instruction.iadd,
        .iaload => instruction.Instruction.iaload,
        .iand => instruction.Instruction.iand,
        .iastore => instruction.Instruction.iastore,
        .iconst_m1 => instruction.Instruction.iconst_m1,
        .iconst_0 => instruction.Instruction.iconst_0,
        .iconst_1 => instruction.Instruction.iconst_1,
        .iconst_2 => instruction.Instruction.iconst_2,
        .iconst_3 => instruction.Instruction.iconst_3,
        .iconst_4 => instruction.Instruction.iconst_4,
        .iconst_5 => instruction.Instruction.iconst_5,
        .idiv => instruction.Instruction.idiv,
        .if_acmpeq => instruction.Instruction{ .if_acmpeq = try reader.read_u16() },
        .if_acmpne => instruction.Instruction{ .if_acmpne = try reader.read_u16() },
        .if_icmpeq => instruction.Instruction{ .if_icmpeq = try reader.read_u16() },
        .if_icmpge => instruction.Instruction{ .if_icmpge = try reader.read_u16() },
        .if_icmpgt => instruction.Instruction{ .if_icmpgt = try reader.read_u16() },
        .if_icmple => instruction.Instruction{ .if_icmple = try reader.read_u16() },
        .if_icmplt => instruction.Instruction{ .if_icmplt = try reader.read_u16() },
        .if_icmpne => instruction.Instruction{ .if_icmpne = try reader.read_u16() },
        .ifeq => instruction.Instruction{ .ifeq = try reader.read_u16() },
        .ifge => instruction.Instruction{ .ifge = try reader.read_u16() },
        .ifgt => instruction.Instruction{ .ifgt = try reader.read_u16() },
        .ifle => instruction.Instruction{ .ifle = try reader.read_u16() },
        .iflt => instruction.Instruction{ .iflt = try reader.read_u16() },
        .ifne => instruction.Instruction{ .ifne = try reader.read_u16() },
        .ifnonnull => instruction.Instruction{ .ifnonnull = try reader.read_u16() },
        .ifnull => instruction.Instruction{ .ifnull = try reader.read_u16() },
        .iinc => instruction.Instruction{ .iinc = .{
            .index = try reader.read_u8(),
            .c = try reader.read_i8(),
        } },
        .iload => instruction.Instruction{ .iload = try reader.read_u8() },
        .iload_0 => instruction.Instruction.iload_0,
        .iload_1 => instruction.Instruction.iload_1,
        .iload_2 => instruction.Instruction.iload_2,
        .iload_3 => instruction.Instruction.iload_3,
        .impdep1 => instruction.Instruction.impdep1,
        .impdep2 => instruction.Instruction.impdep2,
        .imul => instruction.Instruction.imul,
        .ineg => instruction.Instruction.ineg,
        .instanceof => instruction.Instruction{ .instanceof = try reader.read_u16() },
        .invokedynamic => instruction.Instruction{ .invokedynamic = try reader.read_u16() },
        .invokeinterface => instruction.Instruction{ .invokeinterface = try reader.read_u16() },
        .invokespecial => instruction.Instruction{ .invokespecial = try reader.read_u16() },
        .invokestatic => instruction.Instruction{ .invokestatic = try reader.read_u16() },
        .invokevirtual => instruction.Instruction{ .invokevirtual = try reader.read_u16() },
        .ior => instruction.Instruction.ior,
        .irem => instruction.Instruction.irem,
        .ireturn => instruction.Instruction.ireturn,
        .ishl => instruction.Instruction.ishl,
        .ishr => instruction.Instruction.ishr,
        .istore => instruction.Instruction{ .istore = try reader.read_u8() },
        .istore_0 => instruction.Instruction.istore_0,
        .istore_1 => instruction.Instruction.istore_1,
        .istore_2 => instruction.Instruction.istore_2,
        .istore_3 => instruction.Instruction.istore_3,
        .isub => instruction.Instruction.isub,
        .iushr => instruction.Instruction.iushr,
        .ixor => instruction.Instruction.ixor,
        .jsr => instruction.Instruction{ .jsr = try reader.read_i16() },
        .jsr_w => instruction.Instruction{ .jsr_w = try reader.read_i32() },
        .l2d => instruction.Instruction.l2d,
        .l2f => instruction.Instruction.l2f,
        .l2i => instruction.Instruction.l2i,
        .ladd => instruction.Instruction.ladd,
        .laload => instruction.Instruction.laload,
        .land => instruction.Instruction.land,
        .lastore => instruction.Instruction.lastore,
        .lcmp => instruction.Instruction.lcmp,
        .lconst_0 => instruction.Instruction.lconst_0,
        .lconst_1 => instruction.Instruction.lconst_1,
        .ldc => instruction.Instruction{ .ldc = try reader.read_u8() },
        .ldc_w => instruction.Instruction{ .ldc_w = try reader.read_u16() },
        .ldc2_w => instruction.Instruction{ .ldc2_w = try reader.read_u16() },
        .ldiv => instruction.Instruction.ldiv,
        .lload => instruction.Instruction{ .lload = try reader.read_u8() },
        .lload_0 => instruction.Instruction.lload_0,
        .lload_1 => instruction.Instruction.lload_1,
        .lload_2 => instruction.Instruction.lload_2,
        .lload_3 => instruction.Instruction.lload_3,
        .lmul => instruction.Instruction.lmul,
        .lneg => instruction.Instruction.lneg,
        .lookupswitch => instruction.Instruction.lookupswitch, //TODO: Implement
        .lor => instruction.Instruction.lor,
        .lrem => instruction.Instruction.lrem,
        .lreturn => instruction.Instruction.lreturn,
        .lshl => instruction.Instruction.lshl,
        .lshr => instruction.Instruction.lshr,
        .lstore => instruction.Instruction{ .lstore = try reader.read_u8() },
        .lstore_0 => instruction.Instruction.lstore_0,
        .lstore_1 => instruction.Instruction.lstore_1,
        .lstore_2 => instruction.Instruction.lstore_2,
        .lstore_3 => instruction.Instruction.lstore_3,
        .lsub => instruction.Instruction.lsub,
        .lushr => instruction.Instruction.lushr,
        .lxor => instruction.Instruction.lxor,
        .monitorenter => instruction.Instruction.monitorenter,
        .monitorexit => instruction.Instruction.monitorexit,
        .multianewarray => instruction.Instruction{ .multianewarray = .{
            .index = try reader.read_u16(),
            .dimensions = try reader.read_u8(),
        } },
        .new => instruction.Instruction{ .new = try reader.read_u16() },
        .newarray => instruction.Instruction{ .newarray = try reader.read_u8() },
        .nop => instruction.Instruction.nop,
        .pop => instruction.Instruction.pop,
        .pop2 => instruction.Instruction.pop2,
        .putfield => instruction.Instruction{ .putfield = try reader.read_u16() },
        .putstatic => instruction.Instruction{ .putstatic = try reader.read_u16() },
        .ret => instruction.Instruction{ .ret = try reader.read_u8() },
        ._return => instruction.Instruction._return,
        .saload => instruction.Instruction.saload,
        .sastore => instruction.Instruction.sastore,
        .sipush => instruction.Instruction{ .sipush = try reader.read_i16() },
        .swap => instruction.Instruction.swap,
        .tableswitch => instruction.Instruction.tableswitch, //TODO: Implement
        .wide => instruction.Instruction.wide, //TODO: Implement
    };

    return inst;
}
